# This is a basic workflow to help you get started with Actions

name: Push To Yandex Cloud CR

# Controls when the action will run.
on:
  push:
    branches: [ develop ]
  release:
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs called "build" and "deploy"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}


      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
          CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
          CR_REPOSITORY: ${{ secrets.CR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Deploy COI VM
        id: deploy-coi
        uses: yc-actions/yc-coi-deploy@b22db2965c8af6bf0980e8b026c5e80ad6e15adf
        env:
          IMAGE_URL: cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:${{ github.sha }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          vm-name: ${{ secrets.YC_VM_NAME }}
          vm-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          vm-subnet-id: ${{ secrets.YC_SUBNET_ID }}
          user-data-path: './yandex-cloud/user-data.yaml'
          docker-compose-path: './yandex-cloud/docker-compose.yaml'

# # This is a basic workflow to help you get started with Actions

# name: Deploy

# # Controls when the action will run. Triggers the workflow on push or pull request
# # events but only for the master branch
# on:
#   push:
#     branches: [ develop ]

# env:
#   IMAGE_TAG: ${{ github.sha }}
#   IMAGE_NAME: cr.yandex/${{ secrets.CR_REGISTRY }}/${{ secrets.CR_REPOSITORY }}-tools-frontend:${{ github.sha }}

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       # initialize repo
#       - uses: actions/checkout@v2

#       - name: Login to Yandex Cloud Container Registry
#         id: login-cr
#         uses: yc-actions/yc-cr-login@v1
#         with:
#           yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

#       - name: Build, tag, and push image to Yandex Cloud Container Registry
#         env:
#           CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
#           CR_REPOSITORY: ${{ secrets.CR_REPOSITORY }}
#           IMAGE_TAG: ${{ github.sha }}

#         run: |
#           echo CR_REGISTRY=${{ secrets.CR_REGISTRY }} >> .env.production
#           docker compose build
#           docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY-tools-frontend:$IMAGE_TAG

#   update-yc:
#     runs-on: ubuntu-latest
#     needs:
#       - deploy
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: YC COI Container Deploy
#         id: deploy-coi
#         uses: yc-actions/yc-coi-deploy@v2.0.0
#         env:
#           CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
#           CR_REPOSITORY: ${{ secrets.CR_REPOSITORY }}
#           IMAGE_TAG: ${{ github.sha }}
#         with:
#           yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
#           folder-id: ${{ secrets.YC_FOLDER_ID }}
#           vm-name: ${{ secrets.YC_VM_NAME }}
#           vm-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
#           vm-subnet-id: ${{ secrets.YC_SUBNET_ID }}
#           user-data-path: './yandex-cloud/user-data.yaml'
#           docker-compose-path: './yandex-cloud/docker-compose.yaml'
